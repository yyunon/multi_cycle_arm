module reg_file #(parameter W=32)(clk,DATA_in,DATA_out_1,DATA_out_2,r15,
											adr_dst,adr_src1,adr_src2,
											write_enable,reset);
											
	
	input clk,reset,write_enable;
	input [3:0] adr_dst,adr_src1,adr_src2;
	input [W-1:0] DATA_in,r15;
	output [W-1:0] DATA_out_1;
	output [W-1:0] DATA_out_2;
	
	wire w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15,w0;
	wire [15:0] select_dst;
	wire [W-1:0] reg_1_out,reg_2_out,reg_3_out,reg_4_out,reg_5_out,reg_6_out,reg_7_out,reg_8_out,reg_9_out,reg_10_out,reg_11_out,reg_12_out,reg_13_out,reg_14_out,reg_15_out,reg_16_out,out1,out2;
	
	assign DATA_out_1 = out1;
	assign DATA_out_2 = out2;
	
	assign w0 = write_enable & select_dst[0];
	assign w1 = write_enable & select_dst[1];
	assign w2 = write_enable & select_dst[2];
	assign w3 = write_enable & select_dst[3];
	assign w4 = write_enable & select_dst[4];
	assign w5 = write_enable & select_dst[5];
	assign w6 = write_enable & select_dst[6];
	assign w7 = write_enable & select_dst[7];
	assign w8 = write_enable & select_dst[8];
	assign w9 = write_enable & select_dst[9];
	assign w10 = write_enable & select_dst[10];
	assign w11 = write_enable & select_dst[11];
	assign w12 = write_enable & select_dst[12];
	assign w13 = write_enable & select_dst[13];
	assign w14 = write_enable & select_dst[14];
	assign w15 = write_enable & select_dst[15];
	
	
	my_decoder16 dec(.in(adr_dst), .out(select_dst));
	
	mux_16_1 #(W) mux1(.select(adr_src1),.in1(reg_1_out),.in2(reg_2_out),.in3(reg_3_out),.in4(reg_4_out),.in5(reg_5_out),.in6(reg_6_out),.in7(reg_7_out),
							.in8(reg_8_out),.in9(reg_9_out),.in10(reg_10_out),.in11(reg_11_out),.in12(reg_12_out),.in13(reg_13_out),.in14(reg_14_out),.in15(reg_15_out),.in16(reg_16_out),.out(out1));
	
	mux_16_1 #(W) mux2(.select(adr_src2),.in1(reg_1_out),.in2(reg_2_out),.in3(reg_3_out),.in4(reg_4_out),.in5(reg_5_out),.in6(reg_6_out),.in7(reg_7_out),
							.in8(reg_8_out),.in9(reg_9_out),.in10(reg_10_out),.in11(reg_11_out),.in12(reg_12_out),.in13(reg_13_out),.in14(reg_14_out),.in15(reg_15_out),.in16(reg_16_out),.out(out2));
							
	
	simple_register_write #(W) R1(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w0),.out(reg_1_out));
	
	simple_register_write #(W) R2(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w1),.out(reg_2_out));
	
	simple_register_write #(W) R3(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w2),.out(reg_3_out));
	
	simple_register_write #(W) R4(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w3),.out(reg_4_out));
	
	simple_register_write #(W) R5(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w4),.out(reg_5_out));

	simple_register_write #(W) R6(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w5),.out(reg_6_out));

	simple_register_write #(W) R7(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w6),.out(reg_7_out));

	simple_register_write #(W) R8(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w7),.out(reg_8_out));
	
	simple_register_write #(W) R9(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w8),.out(reg_9_out));
	
	simple_register_write #(W) R10(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w9),.out(reg_10_out));
	
	simple_register_write #(W) R11(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w10),.out(reg_11_out));
	
	simple_register_write #(W) R12(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w11),.out(reg_12_out));
	
	simple_register_write #(W) R13(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w12),.out(reg_13_out));
	
	simple_register_write #(W) R14(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w13),.out(reg_14_out));
	
	simple_register_write #(W) R15(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w14),.out(reg_15_out));
	
	simple_register_write #(W) PC(.clk(clk),.DATA(DATA_in),.reset(reset),.write(w15),.out(reg_16_out));
	
endmodule 